version: "3"
name: uhost-v3
services:
  # PostgreSql
  pgsql:
    image: postgres:14-alpine
    container_name: "${APP_NAME}-pgsql"
    restart: unless-stopped
    environment:
      PGPASSWORD: "${PGSQL_PASSWORD}"
      POSTGRES_DB: "${PGSQL_DATABASE}"
      POSTGRES_DB_LOGS: "${PGSQL_DATABASE_LOGS}"
      POSTGRES_USER: "${PGSQL_USERNAME}"
      POSTGRES_PASSWORD: "${PGSQL_PASSWORD}"
      POSTGRES_DB_SCHEMA: "${PGSQL_SCHEMA}"
    ports:
      - "${FORWARD_HOST}:${FORWARD_PGSQL_PORT}:5432"
    volumes:
      - "./pginit.sh:/docker-entrypoint-initdb.d/init.sh"
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${PGSQL_DATABASE}",
          "-U",
          "${PGSQL_USERNAME}",
        ]
      retries: 3
      timeout: 10s

  # Redis
  redis:
    image: redis:6.0-alpine
    container_name: "${APP_NAME}-redis"
    restart: unless-stopped
    ports:
      - "${FORWARD_HOST}:${FORWARD_REDIS_PORT}:6379"
    volumes:
      - redis_volume:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      retries: 3
      timeout: 10s

  # Postgres Web UI
  adminer:
    image: adminer
    container_name: "${APP_NAME}-adminer"
    restart: always
    ports:
      - "${FORWARD_HOST}:${FORWARD_ADMINER_PORT}:8080"
    depends_on:
      - pgsql
    environment:
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_SERVER: pgsql
      ADMINER_DESIGN: hever
      ADMINER_DEFAULT_DB_NAME: "${PGSQL_DATABASE}"

  # Redis Web UI
  redis-commander:
    container_name: "${APP_NAME}-redis-cmdr"
    image: rediscommander/redis-commander:latest
    restart: always
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379:${REDIS_DB_NUM}
    ports:
      - "${FORWARD_HOST}:${FORWARD_REDIS_CMDR_PORT}:8081"

  # Mailhog
  mailhog:
    image: mailhog/mailhog:latest
    container_name: "${APP_NAME}-mailhog"
    restart: unless-stopped
    ports:
      - "${FORWARD_HOST}:${FORWARD_MAILHOG_PORT}:1025"
      - "${FORWARD_HOST}:${FORWARD_MAILHOG_DASHBOARD_PORT}:8025"

  # Mongo DB
  mongodb:
    container_name: "${APP_NAME}-mongo"
    image: mongo:3
    restart: unless-stopped
    volumes:
      - mongo_db_volume:/data/db
      - mongo_cfg_volume:/data/configdb

  elasticsearch:
    container_name: "${APP_NAME}-elasticsearch"
    image: elasticsearch:5.6.3
    restart: unless-stopped
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_volume:/usr/share/elasticsearch/data

  graylog:
    container_name: "${APP_NAME}-graylog"
    image: graylog/graylog:2.4.0-1
    restart: unless-stopped
    environment:
      # CHANGE ME!
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_WEB_ENDPOINT_URI=http://${FORWARD_HOST}:${FORWARD_GRAYLOG_PORT}/api
    links:
      - mongodb:mongo
      - elasticsearch
    depends_on:
      - mongodb
      - elasticsearch
    ports:
      # HTTP
      - ${FORWARD_GRAYLOG_PORT}:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
    volumes:
      - "graylog_volume:/usr/share/graylog/data"

volumes:
  postgres_volume:
  graylog_volume:
  mongo_db_volume:
  mongo_cfg_volume:
  redis_volume:
  elasticsearch_volume:
